import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import re
from classes import user
import config
import dbworker

import datetime

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not user.is_new(message.chat.id):
        name = user.get_user_data(message.chat.id)['first_name']
    elif not message.from_user.first_name == '':
        name = message.from_user.first_name
    else:
        name = message.from_user.username
    text = "" \
           "*–ü—Ä–∏–≤–µ—Ç, {},* –≤–µ—á–µ—Ä –≤ –•–∞—Ç—É!\n" \
           "–Ø –º–æ–≥—É –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–º —Å–ø–∏—Å–∫–µ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!\n" \
           "*–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?*üòâ\n" \
           "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –≤–≤–µ–¥–µ–º –ø–µ—Ä—Å–æ–Ω–∞–¥—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –º–æ–≥ –∏—Å–∫–∞—Ç—å —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–∞—Ö.".format(name)

    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?ü§î", callback_data="help"),
               InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", callback_data="complete_personal_data"))
    bot.send_message(message.chat.id, parse_mode='Markdown', text=text, reply_markup=markup)


# ------- get help --------
@bot.message_handler(commands=['help'])
def ask_help_command(message):
    text = "*–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥*\n" \
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –ø–æ–µ—Ö–∞–ª–∏!\n" \
            "/help - –°–ø—Ä–æ—Å–∏—Ç—å, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\n" \
            "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n" \
            "/updateprofile - –û–±–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.\n" \
            "/showuniversities - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã\n" \
            "/showmydirections - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n" \
            "/editdirections - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n" \
            "/pay - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é\n" \
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
    bot.send_message(message.chat.id, text=text, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data == 'help')
def ask_help(call):
    text = "*–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥*\n" \
           "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –ø–æ–µ—Ö–∞–ª–∏!\n" \
           "/help - –°–ø—Ä–æ—Å–∏—Ç—å, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\n" \
           "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n" \
           "/updateprofile - –û–±–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.\n" \
           "/showdmyirections - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã\n" \
           "/showmydirections - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n" \
           "/editdirections - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n" \
           "/pay - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é\n" \
           "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
    bot.send_message(call.message.chat.id, text=text, parse_mode='Markdown')


# ------- get an agreement --------
def send_consent(chat_id):
    text = "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: "
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="agreed"),
               InlineKeyboardButton("–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="send_consent"))
    bot.send_message(chat_id, parse_mode='Markdown', text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'complete_personal_data')
def ask_personal_data(call):
    send_consent(call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in ['agreed', 'send_consent', 'disagree'])
def make_consent(call):
    text = "–û—Ç–ª–∏—á–Ω–æüëç –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ!\n\n" \
           "–ù–∞–∂–º–∏—Ç–µ: _–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ_, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n" \
           "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:)"
    if call.data == "agreed":
        user.sign_consent(call.message.chat.id)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ‚úÖ", callback_data="disagree"),
                   InlineKeyboardButton("–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", callback_data='send_consent'))

        bot.answer_callback_query(call.id, "–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=markup)

        markup1 = InlineKeyboardMarkup()
        markup1.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="register"))
        bot.send_message(chat_id=call.message.chat.id, text=text,
                         timeout=100, reply_markup=markup1, parse_mode='Markdown')

    elif call.data == 'disagree':
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
    else:
        bot.answer_callback_query(call.id, "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


# ------- register/update profile --------
@bot.message_handler(commands=['register', 'updateprofile'])
def profile_register_command(message):
    if user.check_sign_consent:
        dbworker.set_state(message.chat.id, config.States.S_NAME.value)
        bot.send_message(message.chat.id, text=config.States.S_NAME_MESSAGE.value)
    else:
        send_consent(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'register')
def profile_register(call):
    dbworker.set_state(call.message.chat.id, config.States.S_NAME.value)
    bot.send_message(call.message.chat.id, text=config.States.S_NAME_MESSAGE.value)


# NAME
@bot.message_handler(func=lambda message: config.name_filter(message.chat.id))
def user_entering_name(message):
    if user.update_names(message, 'first_name'):
        bot.send_message(message.chat.id, text=config.States.S_LAST_NAME_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_LAST_NAME.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_NAME.value)


# LAST_NAME
@bot.message_handler(func=lambda message: config.lastname_filter(message.chat.id))
def user_entering_last_name(message):
    if user.update_names(message, 'last_name'):
        bot.send_message(message.chat.id, text=config.States.S_MIDDLE_NAME_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_MIDDLE_NAME.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_LAST_NAME.value)


# MIDDLE_NAME
@bot.message_handler(func=lambda message: config.middlename_filter(message.chat.id))
def user_entering_middle_name(message):
    if user.update_names(message, 'middle_name'):
        bot.send_message(message.chat.id, text=config.States.S_BIRTHDAY_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_BIRTHDAY.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_MIDDLE_NAME.value)


# BIRTHDAY
@bot.message_handler(func=lambda message: config.birthday_filter(message.chat.id))
def user_entering_birthday(message):
    if user.update_birthday(message):
        bot.send_message(message.chat.id, text=config.States.S_EMAIL_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_EMAIL.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_BIRTHDAY.value)


# EMAIL
@bot.message_handler(func=lambda message: config.email_filter(message.chat.id))
def user_entering_email(message):
    try:
        if message.entities[0].type == 'email' and user.update_email(message):
            bot.send_message(message.chat.id, text=config.States.S_FINISH_MESSAGE.value, parse_mode='Markdown')
            dbworker.set_state(message.chat.id, config.States.S_START.value)

            send_university_list(message.chat.id)
        else:
            bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
            dbworker.set_state(message.chat.id, config.States.S_EMAIL.value)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_EMAIL.value)


# ------- markup for universities & departments & directions  --------

def get_markup_for_obj(table, val_where, val, un_id=None):
    markup = InlineKeyboardMarkup()
    objects = user.get_data_from(table, val_where, val)
    for obj in objects:
        callback = str(obj[0]) + "_" + table
        markup.add(InlineKeyboardButton(obj[1], callback_data=callback))

    if table == 'departments':
        text = '¬´ –ù–∞–∑–∞–¥ –∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º'
        callback = 'back_from' + "_" + table + '#' + str(val)
        markup.row(InlineKeyboardButton(text, callback_data=callback),
                   InlineKeyboardButton('–ù–µ—Ç –º–æ–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞', callback_data='request_for_updates'))
    elif table == 'directions':
        text = '¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º'
        callback = 'back_from' + "_" + table
        if un_id is not None:
            callback += '#' + un_id
        markup.row(InlineKeyboardButton(text, callback_data=callback),
                   InlineKeyboardButton('–ù–µ—Ç –º–æ–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data='request_for_updates'))
    elif table == 'universities':
        markup.row(InlineKeyboardButton('–ù–µ—Ç –º–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', callback_data='request_for_updates'))

    return markup


def get_user_directions_keyboard(chat_id):
    directions = user.get_all_user_directions(chat_id)
    if not len(directions) == 0:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for direction in directions:
            text = "{}. {}. {}".format(direction[0], direction[1], direction[2])
            markup.add(types.KeyboardButton(text))
        return markup
    else:
        return None


def get_direction_data(un_name, dp_name, dr_name, chat_id):
    ans = user.get_direction(un_name, dp_name, dr_name, chat_id)
    if ans is not None:

        text = "*–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {}, {} {}*\n" \
               "----------------------\n" \
               "–ú–µ—Å—Ç–æ —Å —Ç–∞–±–ª–∏—Ü–µ: *{}\n*" \
               "–ù–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: *{}*\n" \
               "–° –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –±—É–¥–µ—Ç: *{}*\n"
        text_1 = "–ö–æ–ª–ª–∏—á–µ—Å–≤–æ –ø–æ—Å—Ç—É–ø–∞—é—â–∏–π –≤ —Å–ø–∏—Å–∫–µ *{}*\n" \
                 "–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: *{}*"
        return [text.format(dr_name, dp_name, un_name, 10, '–Ω–µ—Ç', 2), text_1.format(ans[0], ans[1]), ans[2]]
    else:
        return None


def send_university_list(chat_id):
    text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã"
    markup = get_markup_for_obj('universities', None, None)
    bot.send_message(chat_id, text=text, reply_markup=markup)


# ------- add direction --------
@bot.message_handler(commands=['showuniversities'])
def add_university(message):
    ans = config.finished_registration(message.chat.id)
    if ans is not None:
        bot.send_message(message.chat.id, text=ans)
    else:
        send_university_list(message.chat.id)


@bot.callback_query_handler(func=lambda call: 'back_from_departments' == call.data.split('#')[0])  # !!!
def show_universities_callback(call):
    text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã"
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ!")
    markup = get_markup_for_obj('universities', None, None)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'back_from_directions' == call.data.split('#')[0])  # !!!
def show_department_callback(call):
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ!")
    un_id = call.data.split('#')[1]
    objects = user.get_departments_by_un_id(int(un_id))
    markup = InlineKeyboardMarkup()
    if objects is not None:
        for obj in objects:
            callback = str(obj[0]) + "_" + 'departments'
            markup.add(InlineKeyboardButton(obj[1], callback_data=callback))

    callback = 'back_from_departments' + '#' + un_id
    markup.add(InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥ –∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º', callback_data=callback),
               InlineKeyboardButton('–ù–µ—Ç –º–æ–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞', callback_data='request_for_updates'))
    text = "–î–ª—è —ç—Ç–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç *–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:*"
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown',
                          text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_universities', call.data) is not None)
def show_departments(call):
    text = "–î–ª—è —ç—Ç–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç *–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:*"
    un_id = int(re.match(r'\d{,}[1-9]', call.data).group())
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ!")
    markup = get_markup_for_obj('departments', 'un_id', un_id)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown',
                          text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_departments', call.data) is not None)
def show_directions(call):
    text = "–î–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ *–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n–í—ã–±–∏—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö:"
    un_id = call.message.json['reply_markup']['inline_keyboard'][-1][0]['callback_data'].split('#')[-1]
    dp_id = int(re.match(r'\d{,}[1-9]', call.data).group())
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ!")
    markup = get_markup_for_obj('directions', 'dp_id', dp_id, un_id)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown',
                          text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_directions', call.data) is not None)
def show_direction(call):
    dr_id = int(re.match(r'\d{,}[1-9]', call.data).group())
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ!")
    if user.get_user_type(call.message.chat.id) in config.ACCESS_LEVEL_2:

        ans = user.update_directions(call.message.chat.id, dr_id)
        if ans == 2:
            bot.send_message(call.message.chat.id, text='–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ–±–µ —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
            text = '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n' \
                   '*–í—ã–±–∏—Ä–∏—Ç–µ –∏–∑ –≤—ã–ø–∞–≤—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*\n' \
                   '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ *—Å–ø–∏—Å–∫–∞ –≤—ã—à–µ*'
            markup = get_user_directions_keyboard(call.message.chat.id)
            bot.send_message(chat_id=call.message.chat.id, text=text, parse_mode='Markdown', reply_markup=markup)
        elif ans == 1:
            bot.send_message(call.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
            text = '–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –≤–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏\n' \
                   '*–í—ã–±–∏—Ä–∏—Ç–µ –∏–∑ –≤—ã–ø–∞–≤—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*\n' \
                   '–õ–∏–±–æ –≤–≤–µ–¥–∏—å—Ç–µ –∫–æ–º–∞–Ω–¥—É\n/showmydirections\n' \
                   '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ)'
            markup = get_user_directions_keyboard(call.message.chat.id)
            bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=markup, parse_mode='Markdown')
        else:
            text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫....\n' \
                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–¥–µ–Ω–∏–µ'
            bot.send_message(call.message.chat.id, text=text)
    else:
        # –ª–∏–±–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å
        text = '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n' \
               '–ù–∞–∂–º–∏—Ç–µ /register, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        bot.send_message(chat_id=call.message.chat.id, text=text)


@bot.message_handler(commands=['showmydirections'])
def add_university(message):
    if user.get_user_type(message.chat.id) in config.ACCESS_LEVEL_3:

        ans = config.finished_registration(message.chat.id)
        if ans is not None:
            bot.send_message(message.chat.id, text=ans)
        else:
            text = '*–í—ã–±–∏—Ä–∏—Ç–µ –∏–∑ –≤—ã–ø–∞–≤—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.*\n (–æ—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)'
            markup = get_user_directions_keyboard(message.chat.id)
            bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup, parse_mode='Markdown')
    else:
        text = '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n' \
               '–ù–∞–∂–º–∏—Ç–µ /register, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        bot.send_message(chat_id=message.chat.id, text=text)


# ------- show my directions --------
def show_user_directions(message):
    ans = config.finished_registration(message.chat.id)
    if user.is_new(message.chat.id) or ans is not None:
        bot.send_message(message.chat.id, text=ans)
    else:
        markup = get_user_directions_keyboard(message.chat.id)
        if markup is not None:
            text = '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n' \
                   '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü—É—é.'
            bot.send_message(message.chat.id, text=text, reply_markup=markup)
        else:
            text = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å *–Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è*.\n' \
                   '–í–≤–µ–¥–∏—Ç–µ /showuniversities —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ!'
            bot.send_message(message.chat.id, text=text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: config.direction_filter(message.text))
def get_direction_info(message):
    if user.get_user_type(message.chat.id) in config.ACCESS_LEVEL_2:
        ans = config.finished_registration(message.chat.id)
        if user.is_new(message.chat.id) or ans is not None:
            bot.send_message(message.chat.id, text=ans)
        else:
            a, b, c = message.text.split('. ')
            info = get_direction_data(a, b, c, message.chat.id)
            if info is not None:
                bot.send_message(chat_id=message.chat.id, text=info[0], parse_mode='Markdown')
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton('–û—Ç–∫—ã—Ç—å —Å–∞–π—Ç', url=info[2], callback_data='open_site'))
                bot.send_message(chat_id=message.chat.id, text=info[1], parse_mode='Markdown', reply_markup=markup)
            else:
                text = '–í–µ—Ä–æ—è—Ç–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å'
                bot.send_message(message.chat.id, text=text)
    else:
        # –ª–∏–±–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å
        text = '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n' \
               '–ù–∞–∂–º–∏—Ç–µ /register, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        bot.send_message(chat_id=message.chat.id, text=text)


# ------- edit list of my directions --------
@bot.message_handler(commands=['editdirections'])
def edit_directions(message):
    if user.get_user_type(message.chat.id) in config.ACCESS_LEVEL_3:

        ans = config.finished_registration(message.chat.id)
        if user.is_new(message.chat.id) or ans is not None:
            bot.send_message(message.chat.id, text=ans)
        else:
            directions = user.get_all_user_directions(message.chat.id)
            markup = InlineKeyboardMarkup()
            for direction in directions:
                text = "{}. {}. {}".format(direction[0], direction[1], direction[2])
                callback = "{}_direction".format(direction[3])
                markup.add(InlineKeyboardButton(text=text, callback_data=callback))
            markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—åüóë', callback_data='delete_directions'))
            text = "–í—ã–±–∏—Ä–µ—Ç–µ —Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ *–£–¥–∞–ª–∏—Ç—åüóë*"
            bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup, parse_mode='Markdown')
    else:
        text = '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n' \
               '–ù–∞–∂–º–∏—Ç–µ /register, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        bot.send_message(chat_id=message.chat.id, text=text)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_direction', call.data) is not None)
def mark_direction(call):
    markup = InlineKeyboardMarkup()
    count = 0
    for obj in call.message.json['reply_markup']['inline_keyboard']:
        if call.data == obj[0]['callback_data']:
            text = '‚úîÔ∏è' + obj[0]['text']
            callback = 'mark_' + obj[0]['callback_data']
            count += 1
            markup.add(InlineKeyboardButton(text=text, callback_data=callback))

        else:
            markup.add(InlineKeyboardButton(text=obj[0]['text'], callback_data=obj[0]['callback_data']))

        if 'mark' == obj[0]['callback_data'][:4]:
            count += 1

    bot.answer_callback_query(call.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    text = "*–í—ã –≤—ã–±—Ä–∞–ª–∏–π {}*\n–ù–∞–∂–º–∏—Ç–µ *–£–¥–∞–ª–∏—Ç—å* —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –Ω–∏—Ö"
    if count == 1:
        text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    elif 0 < count < 5:
        text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    else:
        text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π')

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=text, reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: re.match(r'mark_\d{,}[1-9]_direction', call.data) is not None)
def unmark_direction(call):
    markup = InlineKeyboardMarkup()
    count = 0
    for obj in call.message.json['reply_markup']['inline_keyboard']:
        if call.data == obj[0]['callback_data']:
            text = obj[0]['text'][1:]
            callback = obj[0]['callback_data'][5:]
            count -= 1
            markup.add(InlineKeyboardButton(text=text, callback_data=callback))
        else:
            markup.add(InlineKeyboardButton(text=obj[0]['text'], callback_data=obj[0]['callback_data']))
        if 'mark' == obj[0]['callback_data'][:4]:
            count += 1

    bot.answer_callback_query(call.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    text = "*–í—ã –≤—ã–±—Ä–∞–ª–∏–π {}*\n–ù–∞–∂–º–∏—Ç–µ *–£–¥–∞–ª–∏—Ç—å* —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –Ω–∏—Ö"
    if count == 1:
        text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    elif 0 < count < 5:
        text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    else:
        text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π')

    bot.edit_message_text(chat_id=call.message.chat.id, text=text, message_id=call.message.message_id,
                          reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data == 'delete_directions')
def delete_directions(call):
    count = 0
    directions = []
    for obj in call.message.json['reply_markup']['inline_keyboard']:
        if 'mark' == obj[0]['callback_data'][:4]:
            dr_id = obj[0]['callback_data'].split('_')[1]
            directions.append(int(dr_id))

        if 'mark' == obj[0]['callback_data'][:4]:
            count += 1

    if user.delete_directions(call.message.chat.id, directions):
        bot.answer_callback_query(call.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        text = "*–í—ã —É–¥–∞–ª–∏–ª–∏ {}*\n–í–≤–µ–¥–∏—Ç–µ /showmydirections, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        if count == 1:
            text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        elif 0 < count < 5:
            text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
        else:
            text = text.format(str(count) + ' –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π')

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=text, parse_mode='Markdown')
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞..")
        text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö...\n' \
               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–∏—Ä–∞—Ü–∏—é /editdirections'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)


# ------- add to waiting for updates--------

@bot.callback_query_handler(func=lambda call: call.data == 'request_for_updates')
def add_waiting(call):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–∞—à *—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –Ω–µ –Ω–∞—à–ª–∏\n' \
           '–ú—ã –ø—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∏ –æ–±–µ—â–∞–µ–º –¥–æ–±–∞–∏—Ç—å –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2-—É—Ö –¥–Ω–µ–π!\n' \
           '*–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –¥–æ–±–∞–≤–º–∏ –µ–≥–æ –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!*'
    dbworker.set_state(call.message.chat.id, config.States.S_PROBLEM.value)
    bot.send_message(chat_id=call.message.chat.id, text=text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: config.problem_filter(message.chat.id))
def get_direction_info(message):
    if user.save_user_problem(message.chat.id, message.text):
        text = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π!\n' \
               '–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º –≤—Å–µ –≤ –±–ª–∏–∂–π—à–µ–µ –≤—Ä–µ–º—è!'
    else:
        text = 'Ooopss..\n' \
               '–í–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã\n' \
               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ'

    dbworker.set_state(message.chat.id, config.States.S_START.value)
    bot.send_message(chat_id=message.chat.id, text=text, parse_mode='Markdown')


bot.infinity_polling()

