import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import re
from classes import user
import config
import dbworker

import datetime

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not user.is_new(message.chat.id):
        name = user.get_user_data(message.chat.id)['last_name']
    elif not message.from_user.first_name == '':
        name = message.from_user.first_name
    else:
        name = message.from_user.username
    text = "" \
           "*–ü—Ä–∏–≤–µ—Ç, {},* –≤–µ—á–µ—Ä –≤ –•–∞—Ç—É!\n" \
           "–Ø –º–æ–≥—É –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–º —Å–ø–∏—Å–∫–µ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!\n" \
           "*–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?*üòâ\n" \
           "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –≤–≤–µ–¥–µ–º –ø–µ—Ä—Å–æ–Ω–∞–¥—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –º–æ–≥ –∏—Å–∫–∞—Ç—å —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–∞—Ö.".format(name)

    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?ü§î", callback_data="help"),
               InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", callback_data="complete_personal_data"))
    bot.send_message(message.chat.id, parse_mode='Markdown', text=text, reply_markup=markup)


@bot.message_handler(commands=['help'])
@bot.callback_query_handler(func=lambda call: call.data == 'help')
def ask_help(call):
    text = "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    bot.send_message(call.message.chat.id, text=text)


@bot.callback_query_handler(func=lambda call: call.data == 'complete_personal_data')
def ask_personal_data(call):
    text = "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: "
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="agreed"),
               InlineKeyboardButton("–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="send_consent"))
    bot.send_message(call.message.chat.id, parse_mode='Markdown', text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['agreed', 'send_consent'])  # !!double click error
def make_consent(call):
    text = "–û—Ç–ª–∏—á–Ω–æüëç –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ!\n\n" \
           "–ù–∞–∂–º–∏—Ç–µ: _–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ_, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n" \
           "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:)"
    if call.data == "agreed":
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ‚úÖ", callback_data="agreed"),
                   InlineKeyboardButton("–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", callback_data='send_consent'))

        bot.answer_callback_query(call.id, "–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
        bot.edit_message_text(chat_id=call.message.chat.id,
                              text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
                              message_id=call.message.message_id, reply_markup=markup)

        markup1 = InlineKeyboardMarkup()
        markup1.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="register"))
        bot.send_message(chat_id=call.message.chat.id, text=text,
                         timeout=100, reply_markup=markup1, parse_mode='Markdown')
    else:
        bot.answer_callback_query(call.id, "cb_want_read")


# --- register/update profile ----
# @bot.message_handler(commands=['register', 'updateProfile'])
@bot.callback_query_handler(func=lambda call: call.data == 'register')
def profile_register(call):
    chat_id = call.message.chat.id
    dbworker.set_state(chat_id, config.States.S_NAME.value)
    bot.send_message(chat_id, text=config.States.S_NAME_MESSAGE.value)


# NAME
@bot.message_handler(func=lambda message: config.name_filter(message.chat.id))
def user_entering_name(message):
    if user.update_names(message, 'first_name'):
        bot.send_message(message.chat.id, text=config.States.S_LAST_NAME_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_LAST_NAME.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_NAME.value)


# LAST_NAME
@bot.message_handler(func=lambda message: config.lastname_filter(message.chat.id))
def user_entering_last_name(message):
    if user.update_names(message, 'last_name'):
        bot.send_message(message.chat.id, text=config.States.S_MIDDLE_NAME_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_MIDDLE_NAME.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_LAST_NAME.value)


# MIDDLE_NAME
@bot.message_handler(func=lambda message: config.middlename_filter(message.chat.id))
def user_entering_middle_name(message):
    if user.update_names(message, 'middle_name'):
        bot.send_message(message.chat.id, text=config.States.S_BIRTHDAY_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_BIRTHDAY.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_MIDDLE_NAME.value)


# BIRTHDAY
@bot.message_handler(func=lambda message: config.birthday_filter(message.chat.id))
def user_entering_birthday(message):
    if user.update_birthday(message):
        bot.send_message(message.chat.id, text=config.States.S_EMAIL_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_EMAIL.value)
    else:
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_BIRTHDAY.value)


# EMAIL
@bot.message_handler(func=lambda message: config.email_filter(message.chat.id))
def user_entering_email(message):
    try:
        if message.entities[0].type == 'email' and user.update_email(message):
            bot.send_message(message.chat.id, text=config.States.S_FINISH_MESSAGE.value, parse_mode='Markdown')
            dbworker.set_state(message.chat.id, config.States.S_START.value)
            print('ok')
            text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:"
            show_data_from(message.chat.id, text, 'universities', None, None)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, text=config.States.S_ERROR_MESSAGE.value)
        dbworker.set_state(message.chat.id, config.States.S_EMAIL.value)


# ------- universities & departments & directions  --------

def show_data_from(chat_id, text, table, val_where, val):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    objects = user.get_data_from(table, val_where, val)
    for obj in objects:
        callback = str(obj[0]) + "_" + table
        markup.add(InlineKeyboardButton(obj[1], callback_data=callback))

    bot.send_message(chat_id, text=text, reply_markup=markup)


# ------- add direction --------
@bot.message_handler(commands=['addUniversity'])
def add_university(message):
    text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:"
    show_data_from(message.chat.id, text, 'universities', None, None)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_universities', call.data) is not None)
def show_departments(call):
    text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:"
    un_id = int(re.match(r'\d{,}[1-9]', call.data).group())
    show_data_from(call.message.chat.id, text, 'departments', 'un_id', un_id)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_departments', call.data) is not None)
def show_directions(call):
    text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    dp_id = int(re.match(r'\d{,}[1-9]', call.data).group())
    show_data_from(call.message.chat.id, text, 'directions', 'dp_id', dp_id)


@bot.callback_query_handler(func=lambda call: re.match(r'\d{,}[1-9]_directions', call.data) is not None)
def show_directions(call):
    dr_id = re.match(r'\d{,}[1-9]', call.data).group()
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç " + dr_id
    bot.send_message(call.message.chat.id, text=text)


bot.infinity_polling()

